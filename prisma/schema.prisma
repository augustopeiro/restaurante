// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev
model User {
  id String @id @default(uuid())
  name String
  email String
  password String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
}

model Category{
  id String @id @default(uuid())
  name String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categories")
  products Product[] //um array dentro de category (feito dessa forma para relacionar com Product)
}

model Product{
  id  String @id @default(uuid())
  name String
  price String
  description String
  banner String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  category Category @relation(fields: [category_id], references: [id]) // necesario para relacionar com Category

  @@map("products")
  category_id String //para criar esse id
  itens Item[]
}

model Order{
  id String @id @default(uuid())
  table Int
  Status Boolean @default(false)
  draft Boolean @default(true) // true faz com que sempre o pedido seja rascunho até que o garçon envie para cozinha
  name String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("orders")
  itens  Item[]//relação
}

model Item{
  id String @id @default(uuid())
  amount Int

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order Order @relation(fields: [order_id], references: [id])//relaçao
  product Product @relation(fields: [product_id], references: [id])

  @@map("itens")
  order_id String//id
  product_id String
}